generator client {
  provider        = "prisma-client-js"
  defaultTake     = "10"
  previewFeatures = ["filteredRelationCount"]
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "ER.md"
//   theme    = "neutral"
// }

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../../tmp"
//   outputToNestJsResourceStructure = "true"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int      @id @default(autoincrement())
  name                   String?
  email                  String   @unique(map: "Auth_email_unique_constraint")
  password               String?
  refreshTokenHash       String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now()) @updatedAt
  isRegisteredWithGoogle Boolean  @default(false)
  avatarUrl              String?
  OAuth2Tokens           Json?
  canCreateOrgs          Boolean  @default(false)
  maxOrgs                Int      @default(1)

  applicantProfiles    ApplicantProfile[]
  interviewsAttending  InterviewAttendee[]
  projectRoles         ProjectUserRole[]
  userRoles            UserRolesOfUser[]
  organisations        UsersInOrganisation[]
  assessments          Assessment[]
  approvals            Approval[]
  createdOrganisations Organisation[]
  auditEvents          AuditEvent[]
  consent              Consent[]
}

model ApplicantProfile {
  id           Int      @id @default(autoincrement())
  profileName  String
  askingSalary String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  userId       Int

  user          User                              @relation(fields: [userId], references: [id])
  organisations ApplicantProfileForOrganisation[]
  positions     ApplicantProfileForPosition[]
  interviews    Interview[]
  assessments   Assessment[]

  @@index([userId])
}

model File {
  id        Int      @id @default(autoincrement())
  key       String
  bucket    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  organisation Organisation[]
}

model Organisation {
  id            Int      @id @default(autoincrement())
  name          String
  machineName   String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  logoId        Int?
  creatorUserId Int?

  creatorUser       User?                             @relation(fields: [creatorUserId], references: [id])
  logo              File?                             @relation(fields: [logoId], references: [id])
  applicantProfiles ApplicantProfileForOrganisation[]
  invitations       Invitation[]
  positions         Position[]
  projects          Project[]
  roles             UserRole[]
  users             UsersInOrganisation[]
  pipelines         Pipeline[]
}

model ApplicantProfileForOrganisation {
  applicantProfileId Int
  organisationId     Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  applicantProfile ApplicantProfile @relation(fields: [applicantProfileId], references: [id])
  organisation     Organisation     @relation(fields: [organisationId], references: [id])

  @@id([applicantProfileId, organisationId])
}

model Project {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  organisationId    Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  approvalsNeeded   Int?
  defaultPipelineId Int?

  defaultPipeline Pipeline?         @relation(fields: [defaultPipelineId], references: [id])
  organisation    Organisation      @relation(fields: [organisationId], references: [id])
  positions       Position[]
  userRoles       ProjectUserRole[]

  @@index([organisationId])
}

model Position {
  id             Int                     @id @default(autoincrement())
  name           String
  description    String?
  openingDate    DateTime?               @default(now())
  closingDate    DateTime?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @default(now()) @updatedAt
  employment     PositionEmploymentType?
  location       String?
  salaryRange    String?
  pipelineId     Int?
  projectId      Int
  organisationId Int
  approved       Boolean                 @default(true)

  organisation      Organisation                  @relation(fields: [organisationId], references: [id])
  pipeline          Pipeline?                     @relation(fields: [pipelineId], references: [id])
  project           Project                       @relation(fields: [projectId], references: [id])
  applicantProfiles ApplicantProfileForPosition[]
  interviews        Interview[]
  assessments       Assessment[]
  approvals         Approval[]

  @@index([projectId])
}

model Approval {
  positionId Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  position Position @relation(fields: [positionId], references: [id])

  @@id([userId, positionId])
  @@index([positionId])
}

model UsersInOrganisation {
  userId         Int
  organisationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  role           UserRoleType

  organisation Organisation @relation(fields: [organisationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@id([userId, organisationId])
  @@index([organisationId])
}

model UserRole {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  type           UserRoleType
  organisationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  organisation Organisation      @relation(fields: [organisationId], references: [id])
  users        UserRolesOfUser[]

  @@index([organisationId])
}

model UserRolesOfUser {
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  role UserRole @relation(fields: [roleId], references: [id])
  user User     @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

model ApplicantProfileForPosition {
  applicantProfileId Int
  positionId         Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  stageId            Int

  applicantProfile ApplicantProfile @relation(fields: [applicantProfileId], references: [id])
  position         Position         @relation(fields: [positionId], references: [id])
  stage            Stage            @relation(fields: [stageId], references: [id])

  @@id([applicantProfileId, positionId])
  @@index([positionId])
}

model ProjectUserRole {
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  projectId Int

  role    ProjectRoleType
  project Project         @relation(fields: [projectId], references: [id])
  user    User            @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
  @@index([projectId])
}

model Stage {
  id                  Int      @id @default(autoincrement())
  name                String
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  order               Int?
  pipelineId          Int?
  isDisqualifiedStage Boolean?

  applicants ApplicantProfileForPosition[]
  interviews Interview[]
  pipeline   Pipeline?                     @relation(fields: [pipelineId], references: [id])
}

model Pipeline {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  organisationId Int?

  organisation Organisation? @relation(fields: [organisationId], references: [id])
  positions    Position[]
  projects     Project[]
  stages       Stage[]
}

// model StagesInPipeline {
//   stageId    Int
//   pipelineId Int
//   order      Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @default(now()) @updatedAt

//   pipeline Pipeline @relation(fields: [pipelineId], references: [id])
//   stage    Stage    @relation(fields: [stageId], references: [id])

//   @@id([stageId, pipelineId])
// }

model Invitation {
  id             Int           @id @default(autoincrement())
  email          String
  role           UserRoleType?
  organisationId Int
  createdAt      DateTime      @default(now())
  sent           Boolean       @default(false)

  organisation Organisation @relation(fields: [organisationId], references: [id])

  @@index([organisationId])
  @@index([sent])
}

model Interview {
  id                 Int      @id @default(autoincrement())
  applicantProfileId Int
  stageId            Int
  positionId         Int
  startDateTime      DateTime
  endDateTime        DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  averageScore       Int?
  scoringSystemId    Int?
  questionsId        Int?

  applicantProfile ApplicantProfile    @relation(fields: [applicantProfileId], references: [id])
  position         Position            @relation(fields: [positionId], references: [id])
  stage            Stage               @relation(fields: [stageId], references: [id])
  questions        Questions?          @relation(fields: [questionsId], references: [id])
  scoringSystem    ScoringSystem?      @relation(fields: [scoringSystemId], references: [id])
  attendees        InterviewAttendee[]
  assessments      Assessment[]

  @@unique([applicantProfileId, stageId, positionId])
  @@index([positionId])
  @@index([applicantProfileId])
}

model Assessment {
  id                 Int            @id @default(autoincrement())
  name               String?
  userId             Int
  score              Int?
  applicantProfileId Int
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt
  positionId         Int
  // Notes will contain a json.stringified value. We don't need to query it so text is fine for now.
  // I'm not entirely sure what making it json would do to the size of the table. Bit wary.
  // One month later: storing this as json might be better so we don't have to parse it ourselves when we select this field
  notes              String?
  scoringSystemId    Int
  type               AssessmentType @default(INTERVIEW)
  interviewId        Int?

  applicantProfile ApplicantProfile @relation(fields: [applicantProfileId], references: [id])
  position         Position         @relation(fields: [positionId], references: [id])
  scoringSystem    ScoringSystem    @relation(fields: [scoringSystemId], references: [id])
  user             User             @relation(fields: [userId], references: [id])
  interview        Interview?       @relation(fields: [interviewId], references: [id])

  @@unique([applicantProfileId, userId, positionId, interviewId, type])
  @@index([applicantProfileId, interviewId, type])
  @@index([applicantProfileId, positionId, type])
}

model InterviewAttendee {
  interviewId Int
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  interview Interview @relation(fields: [interviewId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@id([interviewId, userId])
  @@index([interviewId])
}

model Questions {
  id         Int      @id @default(autoincrement())
  questions  Json
  isCurrent  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  previousId Int?
  name       String

  interviews Interview[]
  previous   Questions?  @relation("History", fields: [previousId], references: [id])
  history    Questions[] @relation("History")
}

model ScoringSystem {
  id        Int                @id @default(autoincrement())
  name      String
  type      ScoringSystemType?
  schema    Json
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt

  assessments Assessment[]
  interviews  Interview[]
}

model AuditEvent {
  id              Int              @id @default(autoincrement())
  eventType       AuditEventType
  entityType      AuditEventEntity
  entityId        Int?
  relatedEntityId Int?
  userId          Int
  createdAt       DateTime         @default(now())
  oldValue        Json?
  newValue        Json?

  user User @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([relatedEntityId])
}

model Consent {
  id          Int         @id @default(autoincrement())
  userId      Int
  requestedAt DateTime    @default(now())
  grantedAt   DateTime
  revokedAt   DateTime
  consentType ConsentType

  user User @relation(fields: [userId], references: [id])

  @@unique([id, userId])
  @@index([userId])
}

enum ConsentType {
  REQUEST_SENT
}

enum AuditEventType {
  CREATED
  UPDATED
  DELETED
  STAGE_CHANGED
  DISQUALIFIED
  APPROVED
  INVITED
}

enum AuditEventEntity {
  POSITION
  APPLICANTPROFILEFORPOSITION
  INTERVIEW
}

enum AssessmentType {
  INTERVIEW
  OTHER
}

enum ScoringSystemType {
  LINEAR
  LIKERT
}

enum PositionEmploymentType {
  FULL
  PART
  CONTRACT
}

enum UserRoleType {
  RECRUITER
  APPLICANT
  ORGANISATION_OWNER
  ORGANISATION_MEMBER
  STANDARD
}

enum ProjectRoleType {
  FINANCIAL_MANAGER
  HIRING_MANAGER
  INTERVIEWER
}
