// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider    = "prisma-client-js"
  defaultTake = 10
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "ER.md"
  theme    = "neutral"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../../tmp"
  outputToNestJsResourceStructure = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                   @id @default(autoincrement())
  name              String?
  email             String                @unique(map: "Auth_email_unique_constraint")
  password          String?
  refreshTokenHash  String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @default(now())
  organisations     UsersInOrganisation[]
  userRoles         UserRolesOfUser[]
  projectRoles      ProjectUserRole[]
  applicantProfiles ApplicantProfile[]
}

model ApplicantProfile {
  id            Int                               @id @default(autoincrement())
  profileName   String
  askingSalary  Int?
  createdAt     DateTime                          @default(now())
  updatedAt     DateTime                          @default(now())
  user          User                              @relation(fields: [userId], references: [id])
  userId        Int
  positions     ApplicantProfileForPosition[]
  organisations ApplicantProfileForOrganisation[]

  @@index([userId])
}

model Organisation {
  id                Int                               @id @default(autoincrement())
  name              String
  machineName       String                            @unique
  createdAt         DateTime                          @default(now())
  updatedAt         DateTime                          @default(now())
  users             UsersInOrganisation[]
  roles             UserRole[]
  applicantProfiles ApplicantProfileForOrganisation[]
  projects          Project[]
  Position          Position[]
}

model ApplicantProfileForOrganisation {
  applicantProfile   ApplicantProfile @relation(fields: [applicantProfileId], references: [id])
  applicantProfileId Int
  organisation       Organisation     @relation(fields: [organisationId], references: [id])
  organisationId     Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())

  @@id([applicantProfileId, organisationId])
}

enum PositionEmploymentType {
  FULL
  PART
  CONTRACT
}

model Project {
  id             Int               @id @default(autoincrement())
  name           String
  description    String?           @db.Text
  organisation   Organisation      @relation(fields: [organisationId], references: [id])
  organisationId Int
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  userRoles      ProjectUserRole[]
  positions      Position[]

  @@index([organisationId])
}

model Position {
  id                Int                           @id @default(autoincrement())
  name              String
  description       String?                       @db.Text
  employment        PositionEmploymentType?
  location          String?
  salaryRange       String?
  openingDate       DateTime?                     @default(now())
  closingDate       DateTime?
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @default(now())
  organisation      Organisation                  @relation(fields: [organisationId], references: [id])
  organisationId    Int
  project           Project                       @relation(fields: [projectId], references: [id])
  projectId         Int
  applicantProfiles ApplicantProfileForPosition[]
  pipeline          Pipeline?                     @relation(fields: [pipelineId], references: [id])
  pipelineId        Int?

  @@index([projectId])
}

enum UserRoleType {
  RECRUITER
  APPLICANT
  ORGANISATION_OWNER
  ORGANISATION_MEMBER
  STANDARD
}

model UsersInOrganisation {
  role           UserRoleType
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  @@id([userId, organisationId])
}

model UserRole {
  id             Int               @id @default(autoincrement())
  name           String            @unique
  type           UserRoleType
  organisation   Organisation      @relation(fields: [organisationId], references: [id])
  organisationId Int
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  users          UserRolesOfUser[]

  @@index([organisationId])
}

model UserRolesOfUser {
  // type      UserRoleType
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      UserRole @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([userId, roleId])
}

model ApplicantProfileForPosition {
  applicantProfile   ApplicantProfile @relation(fields: [applicantProfileId], references: [id])
  applicantProfileId Int
  position           Position         @relation(fields: [positionId], references: [id])
  positionId         Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  stage              Stage            @relation(fields: [stageId], references: [id])
  stageId            Int

  @@id([applicantProfileId, positionId])
}

// Position Roles could be useful in future if custom roles were create.
// It dictates what role people take within the hiring process of a specific position via a many-many
// rather than via a direct enum in the relationship table.
// model PositionRole {
//   id           Int                @id @default(autoincrement())
//   name         String             @unique
//   type         PositionRoleType
//   createdAt    DateTime           @default(now())
//   updatedAt    DateTime           @default(now())
//   userPosition PositionUserRole[]
// }

enum ProjectRoleType {
  HIRING_MANAGER
  INTERVIEWER
}

model ProjectUserRole {
  userId    Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())
  project   Project         @relation(fields: [projectId], references: [id])
  projectId Int
  user      User            @relation(fields: [userId], references: [id])
  role      ProjectRoleType

  @@id([userId, projectId])
}

model Stage {
  id          Int                           @id @default(autoincrement())
  name        String
  description String?                       @db.Text
  createdAt   DateTime                      @default(now())
  updatedAt   DateTime                      @default(now())
  pipeline    StagesInPipeline[]
  applicants  ApplicantProfileForPosition[]
}

model Pipeline {
  id          Int                @id @default(autoincrement())
  name        String
  description String?            @db.Text
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())
  stages      StagesInPipeline[]
  positions   Position[]
}

model StagesInPipeline {
  stage      Stage    @relation(fields: [stageId], references: [id])
  stageId    Int
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id])
  pipelineId Int
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@id([stageId, pipelineId])
}

// model ProcessForPosition {
//   process    Process  @relation(fields: [processId], references: [id])
//   processId  Int
//   position   Position @relation(fields: [positionId], references: [id])
//   positionId Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @default(now())

//   @@id([processId, positionId])
// }
