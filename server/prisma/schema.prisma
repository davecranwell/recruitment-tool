// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider    = "prisma-client-js"
  defaultTake = 10
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "ER.md"
  theme    = "neutral"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../tmp"
  outputToNestJsResourceStructure = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                   @id @default(autoincrement())
  name              String?
  email             String                @unique(map: "Auth_email_unique_constraint")
  password          String?
  refreshTokenHash  String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @default(now())
  organisations     UsersInOrganisation[]
  userRoles         UserRolesOfUser[]
  positionRoles     PositionUserRole[]
  applicantProfiles ApplicantProfile[]
}

model ApplicantProfile {
  id            Int                               @id @default(autoincrement())
  profileName   String
  askingSalary  Int?
  createdAt     DateTime                          @default(now())
  updatedAt     DateTime                          @default(now())
  user          User                              @relation(fields: [userId], references: [id])
  userId        Int
  positions     ApplicantProfileForPosition[]
  organisations ApplicantProfileForOrganisation[]

  @@index([userId])
}

model Organisation {
  id                Int                               @id @default(autoincrement())
  name              String
  machineName       String                            @unique
  createdAt         DateTime                          @default(now())
  updatedAt         DateTime                          @default(now())
  users             UsersInOrganisation[]
  positions         Position[]
  roles             UserRole[]
  applicantProfiles ApplicantProfileForOrganisation[]
}

model ApplicantProfileForOrganisation {
  applicantProfile   ApplicantProfile @relation(fields: [applicantProfileId], references: [id])
  applicantProfileId Int
  organisation       Organisation     @relation(fields: [organisationId], references: [id])
  organisationId     Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())

  @@id([applicantProfileId, organisationId])
}

enum PositionEmploymentType {
  FULL
  PART
  CONTRACT
}

model Position {
  id                Int                           @id @default(autoincrement())
  name              String
  description       String?                       @db.Text
  employment        PositionEmploymentType?
  location          String?
  salaryRange       String?
  openingDate       DateTime?                     @default(now())
  closingDate       DateTime?
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @default(now())
  organisation      Organisation                  @relation(fields: [organisationId], references: [id])
  organisationId    Int
  applicantProfiles ApplicantProfileForPosition[]
  userRoles         PositionUserRole[]

  @@index([organisationId])
}

enum UserRoleType {
  RECRUITER
  APPLICANT
  ORGANISATION_OWNER
  ORGANISATION_MEMBER
  STANDARD
}

model UsersInOrganisation {
  role           UserRoleType
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  @@id([userId, organisationId])
}

model ApplicantProfileForPosition {
  applicantProfile   ApplicantProfile @relation(fields: [applicantProfileId], references: [id])
  applicantProfileId Int
  position           Position         @relation(fields: [positionId], references: [id])
  positionId         Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())

  @@id([applicantProfileId, positionId])
}

model UserRole {
  id             Int               @id @default(autoincrement())
  name           String            @unique
  type           UserRoleType
  organisation   Organisation      @relation(fields: [organisationId], references: [id])
  organisationId Int
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  users          UserRolesOfUser[]

  @@index([organisationId])
}

model UserRolesOfUser {
  // type      UserRoleType
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      UserRole @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([userId, roleId])
}

// Position Roles could be useful in future if custom roles were create.
// It dictates what role people take within the hiring process of a specific position via a many-many
// rather than via a direct enum in the relationship table.
// model PositionRole {
//   id           Int                @id @default(autoincrement())
//   name         String             @unique
//   type         PositionRoleType
//   createdAt    DateTime           @default(now())
//   updatedAt    DateTime           @default(now())
//   userPosition PositionUserRole[]
// }

enum PositionRoleType {
  HIRING_MANAGER
  INTERVIEWER
}

model PositionUserRole {
  position   Position         @relation(fields: [positionId], references: [id])
  positionId Int
  user       User             @relation(fields: [userId], references: [id])
  userId     Int
  role       PositionRoleType
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())

  @@id([userId, positionId])
}

// model Stage {
//   id               Int                @id @default(autoincrement())
//   name             String
//   description      String?            @db.Text
//   createdAt        DateTime           @default(now())
//   updatedAt        DateTime           @default(now())
//   StagesInProcess  StagesInProcess[]
//   PositionUserRole PositionUserRole[]
// }

// model Process {
//   id                 Int                  @id @default(autoincrement())
//   name               String
//   description        String?              @db.Text
//   createdAt          DateTime             @default(now())
//   updatedAt          DateTime             @default(now())
//   StagesInProcess    StagesInProcess[]
//   ProcessForPosition ProcessForPosition[]
// }

// model StagesInProcess {
//   stage     Stage    @relation(fields: [stageId], references: [id])
//   stageId   Int
//   process   Process  @relation(fields: [processId], references: [id])
//   processId Int
//   order     Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())

//   @@id([stageId, processId])
// }

// model ProcessForPosition {
//   process    Process  @relation(fields: [processId], references: [id])
//   processId  Int
//   position   Position @relation(fields: [positionId], references: [id])
//   positionId Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @default(now())

//   @@id([processId, positionId])
// }
